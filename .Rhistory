propselect <- apply( apply( xt, 1, is.na ) , 1, sum) == 0
xt <- xt[,propselect]
ans <- regsubsets( x=xt , y=ycrystal , really.big=T, nvmax=4, method="forward")
summary(ans)
plot( xt[,20], ycrystal)
plot( xt[,40], ycrystal)
plot( xt[,21], ycrystal)
plot( xt[,23], ycrystal)
library("leaps")
xt<-matrix(0,24,320)
for (i in 1:24){
xt[i,] <- as.double( x[i,])
}
colnames(xt)<-colnames(x)
ycrystal <- crystalpoint[order(drugnames)]
ycrystal[ is.na(ycrystal) ] <- 100
propselect <- apply( apply( xt, 1, is.na ) , 1, sum) == 0
xt <- xt[,propselect]
ans <- regsubsets( x=xt , y=ycrystal , really.big=T, nvmax=4, method="forward")
summary(ans)
plot( xt[,20], ycrystal)
plot( xt[,40], ycrystal)
plot( xt[,21], ycrystal)
plot( xt[,23], ycrystal)
ans2 <- lm( ycrystal ~ xt[,c(20,40,21,23)])
summary(ans2)
library("leaps")
xt<-matrix(0,24,320)
for (i in 1:24){
xt[i,] <- as.double( x[i,])
}
colnames(xt)<-colnames(x)
ycrystal <- crystalpoint[order(drugnames)]
ycrystal[ is.na(ycrystal) ] <- 100
propselect <- apply( apply( xt, 1, is.na ) , 1, sum) == 0
xt <- xt[,propselect]
ans <- regsubsets( x=xt , y=ycrystal , really.big=T, nvmax=3, method="forward")
summary(ans)
plot( xt[,20], ycrystal)
plot( xt[,40], ycrystal)
plot( xt[,21], ycrystal)
plot( xt[,23], ycrystal)
xt1<- xt[,c(20,40,21,23)]
ans2 <- lm( ycrystal ~ xt1)
summary(ans2)
library("leaps")
xt<-matrix(0,24,320)
for (i in 1:24){
xt[i,] <- as.double( x[i,])
}
colnames(xt)<-colnames(x)
ycrystal <- crystalpoint[order(drugnames)]
ycrystal[ is.na(ycrystal) ] <- 100
propselect <- apply( apply( xt, 1, is.na ) , 1, sum) == 0
xt <- xt[,propselect]
ans <- regsubsets( x=xt , y=ycrystal , really.big=T, nvmax=3, method="forward")
summary(ans)
plot( xt[,20], ycrystal)
plot( xt[,40], ycrystal)
plot( xt[,21], ycrystal)
plot( xt[,23], ycrystal)
xt1<- xt[,c(20,40,21,23)]
ans2 <- lm( ycrystal ~ xt1)
summary(ans2)
library("leaps")
xt<-matrix(0,24,320)
for (i in 1:24){
xt[i,] <- as.double( x[i,])
}
colnames(xt)<-colnames(x)
ycrystal <- crystalpoint[order(drugnames)]
ycrystal[ is.na(ycrystal) ] <- 100
propselect <- apply( apply( xt, 1, is.na ) , 1, sum) == 0
xt <- xt[,propselect]
ans <- regsubsets( x=xt , y=ycrystal , really.big=T, nvmax=3, method="forward")
summary(ans)
plot( xt[,20], ycrystal)
plot( xt[,40], ycrystal)
plot( xt[,21], ycrystal)
xt1<- xt[,c(20,40,21)]
ans2 <- lm( ycrystal ~ xt1)
summary(ans2)
library("leaps")
xt<-matrix(0,24,320)
for (i in 1:24){
xt[i,] <- as.double( x[i,])
}
colnames(xt)<-colnames(x)
ycrystal <- crystalpoint[order(drugnames)]
ycrystal[ is.na(ycrystal) ] <- 100
propselect <- apply( apply( xt, 1, is.na ) , 1, sum) == 0
xt <- xt[,propselect]
ans <- regsubsets( x=xt , y=ycrystal , really.big=T, nvmax=3, method="forward")
summary(ans)
plot( xt[,20], ycrystal)
plot( xt[,40], ycrystal)
plot( xt[,21], ycrystal)
xt1<- xt[,c(20,40,21)]
ans2 <- lm( ycrystal ~ xt1)
summary(ans2)
xt[,20]
xt[,21]
help(regsubsets)
library(leaps)
knitr::opts_chunk$set(echo = TRUE,warning=FALSE,message=FALSE)
library(readxl)
setwd("/Users/pmzild/Dropbox/ FIU/Research/PhD-students/Noha/")
y <- read.csv("Full-expts-data.csv")
#x <- read.csv("Drug-properties.csv")
x<-read_xlsx("My_molecular_informatics_results for all APIs.xlsx")
drugnames<-names(table(y[,1]))
propertynames<-colnames(x)
w <- as.matrix(y)
z <- rbind ( w[,c(1,3,4)], w[,c(1,3,5)])
z <- rbind ( z, w[,c(1,3,6)])
z <- rbind ( z, w[,c(1,3,7)])
z <- rbind ( z, w[,c(1,3,8)])
z <- rbind ( z, w[,c(1,3,9)])
colnames(z)<-NULL
library("readxl")
ndnames<-c("aspirin","atenolol","benzocaine","caffiene","carbamazepine","corticosterone",
"diclofenac sodium","Flubiprofen","Flufenamic acid","nicotinamide","nitrofurantoin","piroxicam",
"theophylline","tolbutamide")
for (newd in 1:length(ndnames)){
y1<- read_xlsx(paste("June-stability-data/",ndnames[newd]," stability data.xlsx",sep=""))
y2<-y1[2:22,]
newdrug<-names(y1)[1]
drugnames<-c(drugnames,newdrug)
y2<-cbind( rep( newdrug , times=21) , y2)
y2[21,2]<-"1"
colnames(y2)<-NULL
y2<-as.matrix(y2)
z2 <- rbind ( y2[,c(1,2,3)], y2[,c(1,2,4)])
z2 <- rbind ( z2, y2[,c(1,2,5)])
z2 <- rbind ( z2, y2[,c(1,2,6)])
z2 <- rbind ( z2, y2[,c(1,2,7)])
z2[,2]<-as.double(z2[,2])*100
z3<-rbind(z,z2)
z3[is.na(z3)]<-""
z<-z3
}
######
par(mfrow=c(3,4))
crystalpoint <- rep(0,times=length(drugnames))
for (id in 1:length(drugnames)){
drug <- as.factor(z[,1])
percent<-as.double(z[,2])
z[ z[,3]=="N" , 3] <- "999"
days <- as.double(z[,3])
crystal <- days*0
crystal[ days<100] <- 1
select<-drugnames[id]
crystal <- crystal[drug==select]
days <- days[drug==select]
percent <- percent[drug==select]
model <- glm( crystal ~ percent , family = binomial(link='logit'))
summary(model)
drugnew<-1:1000/10
ans2 <- predict(model, newdata=data.frame(percent=drugnew), type="response")
plot(percent,crystal,xlab="Percent Drug",ylab="Probability")
title(main=select)
lines(drugnew,ans2,col=2)
crystalpoint[id]<-(drugnew[ans2>0.5])[1]
}
knitr::opts_chunk$set(echo = TRUE,warning=FALSE,message=FALSE)
library(readxl)
setwd("/Users/pmzild/Dropbox/ FIU/Research/PhD-students/Noha/")
y <- read.csv("Full-expts-data.csv")
#x <- read.csv("Drug-properties.csv")
x<-read_xlsx("My_molecular_informatics_results for all APIs.xlsx")
drugnames<-names(table(y[,1]))
propertynames<-colnames(x)
w <- as.matrix(y)
z <- rbind ( w[,c(1,3,4)], w[,c(1,3,5)])
z <- rbind ( z, w[,c(1,3,6)])
z <- rbind ( z, w[,c(1,3,7)])
z <- rbind ( z, w[,c(1,3,8)])
z <- rbind ( z, w[,c(1,3,9)])
colnames(z)<-NULL
library("readxl")
ndnames<-c("aspirin","atenolol","benzocaine","caffiene","carbamazepine","corticosterone",
"diclofenac sodium","Flubiprofen","Flufenamic acid","nicotinamide","nitrofurantoin","piroxicam",
"theophylline","tolbutamide")
for (newd in 1:length(ndnames)){
y1<- read_xlsx(paste("June-stability-data/",ndnames[newd]," stability data.xlsx",sep=""))
y2<-y1[2:22,]
newdrug<-names(y1)[1]
drugnames<-c(drugnames,newdrug)
y2<-cbind( rep( newdrug , times=21) , y2)
y2[21,2]<-"1"
colnames(y2)<-NULL
y2<-as.matrix(y2)
z2 <- rbind ( y2[,c(1,2,3)], y2[,c(1,2,4)])
z2 <- rbind ( z2, y2[,c(1,2,5)])
z2 <- rbind ( z2, y2[,c(1,2,6)])
z2 <- rbind ( z2, y2[,c(1,2,7)])
z2[,2]<-as.double(z2[,2])*100
z3<-rbind(z,z2)
z3[is.na(z3)]<-""
z<-z3
}
######
par(mfrow=c(3,4))
crystalpoint <- rep(0,times=length(drugnames))
for (id in 1:length(drugnames)){
drug <- as.factor(z[,1])
percent<-as.double(z[,2])
z[ z[,3]=="N" , 3] <- "999"
days <- as.double(z[,3])
crystal <- days*0
crystal[ days<100] <- 1
select<-drugnames[id]
crystal <- crystal[drug==select]
days <- days[drug==select]
percent <- percent[drug==select]
model <- glm( crystal ~ percent , family = binomial(link='logit'))
summary(model)
drugnew<-1:1000/10
ans2 <- predict(model, newdata=data.frame(percent=drugnew), type="response")
plot(percent,crystal,xlab="Percent Drug",ylab="Probability")
title(main=select)
lines(drugnew,ans2,col=2)
crystalpoint[id]<-(drugnew[ans2>0.5])[1]
}
par(mfrow=c(3,4))
for (id in 1:length(drugnames)){
drug <- as.factor(z[,1])
percent<-as.double(z[,2])
z[ z[,3]=="N" , 3] <- "999"
days <- as.double(z[,3])
crystal <- log(days+1)
select<-drugnames[id]
crystal <- crystal[drug==select]
days <- days[drug==select]
percent <- percent[drug==select]
model <- lm( crystal ~ percent)
summary(model)
drugnew<-1:1000/10
ans2 <- predict(model, newdata=data.frame(percent=drugnew), type="response")
plot(percent,crystal,xlab="Percent Drug",ylab="Log(days+1)")
title(main=select)
lines(drugnew,ans2,col=2)
}
# logistic regression on full data
par(mfrow=c(3,4))
drug <- as.factor(z[,1])
percent<-as.double(z[,2])
z[ z[,3]=="N" , 3] <- "999"
days <- as.double(z[,3])
crystal <- days*0
crystal[ days<100] <- 1
model <- glm( crystal ~ percent*drug , family = binomial(link='logit'))
summary(model)
#full data
# response is log(days + 1)
# Multiple linear regression
drug <- as.factor(z[,1])
percent<-as.double(z[,2])
z[ z[,3]=="N" , 3] <- "999"
days <- as.double(z[,3])
crystal <- log(days+1)
model <- lm( crystal ~ percent*drug)
summary(model)
library("leaps")
xt<-matrix(0,24,320)
for (i in 1:24){
xt[i,] <- as.double( x[i,])
}
colnames(xt)<-colnames(x)
ycrystal <- crystalpoint[order(drugnames)]
ycrystal[ is.na(ycrystal) ] <- 100
propselect <- apply( apply( xt, 1, is.na ) , 1, sum) == 0
xt <- xt[,propselect]
ans <- regsubsets( x=xt , y=ycrystal , really.big=T, nvmax=3, method="forward")
summary(ans)
plot( xt[,20], ycrystal)
plot( xt[,40], ycrystal)
plot( xt[,21], ycrystal) #squared AlogP
xt1<- xt[,c(20,40,21)]
ans2 <- lm( ycrystal ~ xt1)
summary(ans2)
ans
summary(ans)
help("regsubsets")
ans$which
which(ans2)
ans2$which
summary(ans2$which)
summary(ans2)$which
summary.regsubsets(ans2)$which
library(leaps)
summary.regsubsets(ans2)$which
summary(ans2)$which
summary.regsubsets
summary(ans)$which
names(xt)[summary(ans)$which]
names(xt)[summary(ans)$which[1,]]
summary(ans)$which[1,]
summary(ans)$which[1,]==TRUE
names(xt)[summary(ans)$which[1,]]
summary(ans)
#PCA R Code for Gopher Tortoise Diets
library(compositions)
tort.pca <- read.csv("GT_DietPropData.csv", header =TRUE, fileEncoding = 'UTF-8-BOM')
file.choose()
tort.pca <- read.csv("/Users/pmzild/Dropbox/ FIU/Research/Adrian/GT CoDA Prelim Analysis/GT_DietPropData.csv", header =TRUE, fileEncoding = 'UTF-8-BOM')
tort.pca
tort.pca <- read.csv("/Users/pmzild/Dropbox/ FIU/Research/Adrian/GT CoDA Prelim Analysis/GT_DietPropData.csv", header =TRUE, fileEncoding = 'UTF-8-BOM')
tort.pca <- read.csv("/Users/pmzild/Dropbox/ FIU/Research/Adrian/GT CoDA Prelim Analysis/GT_DietPropData.csv", header =TRUE, fileEncoding = 'UTF-8-BOM')
tort.pca <- read.csv("/Users/pmzild/Dropbox/ FIU/Research/Adrian/GT CoDA Prelim Analysis/GT_DietPropData.csv", header =TRUE, fileEncoding = 'UTF-8-BOM')
source("~/Dropbox/ FIU/Research/Adrian/GT CoDA Prelim Analysis/GT Diet PCA Code-ild.R")
warnings()
head(tort.pca)
dim(tort.pca)
#Create PCA object without using any transformation for all parts of composition
pca <- prcomp(tort.pca[, 10:14], scale=TRUE)
#or
pca <- prcomp(tort.pca[, -c(1:9)], scale=TRUE)
#or
pca <- prcomp(~Legumes + Fruit + Grasses + Animal + Herbs, data=tort.pca, scale=TRUE)
#I include different ways to code so that I can improve my coding style
#Look at PCA loadings and summary.
pca
summary(pca)
#SQRT transformation on all the parts of the composition
pca <- prcomp(sqrt(tort.pca[, 10:14]), scale=TRUE)
#or
pca <- prcomp(sqrt(tort.pca[, -(1:9)]), scale=TRUE)
#or
pca <- prcomp(~sqrt(Legumes) + sqrt(Fruit) + sqrt(Grasses) + sqrt(Animal) + sqrt(Herbs), data=tort.pca, scale=TRUE)
#Look at PCA loadings and summary.
pca
summary(pca)
Adding closure to the data
diet.clo <- clo(tort.pca, parts=10:12,total=1)
diet.clo
source("~/Dropbox/ FIU/Research/Adrian/GT CoDA Prelim Analysis/GT Diet PCA Code-ild.R")
library(compositions)
tort.pca <- read.csv("/Users/pmzild/Dropbox/ FIU/Research/Adrian/GT CoDA Prelim Analysis/GT_DietPropData.csv", header =TRUE, fileEncoding = 'UTF-8-BOM')
head(tort.pca)
dim(tort.pca)
#Create PCA object without using any transformation for all parts of composition
pca <- prcomp(tort.pca[, 10:14], scale=TRUE)
#or
pca <- prcomp(tort.pca[, -c(1:9)], scale=TRUE)
#or
pca <- prcomp(~Legumes + Fruit + Grasses + Animal + Herbs, data=tort.pca, scale=TRUE)
#I include different ways to code so that I can improve my coding style
#Look at PCA loadings and summary.
pca
summary(pca)
#SQRT transformation on all the parts of the composition
pca <- prcomp(sqrt(tort.pca[, 10:14]), scale=TRUE)
#or
pca <- prcomp(sqrt(tort.pca[, -(1:9)]), scale=TRUE)
#or
pca <- prcomp(~sqrt(Legumes) + sqrt(Fruit) + sqrt(Grasses) + sqrt(Animal) + sqrt(Herbs), data=tort.pca, scale=TRUE)
#Look at PCA loadings and summary.
pca
summary(pca)
#Adding closure to the data
diet.clo <- clo(tort.pca, parts=10:12,total=1)
diet.clo
#Make object "diet.clo" a dataframe
diet.clo <- data.frame(diet.clo)
#Create PCA object without transformation using a closed subcomposition of three
pca <- prcomp(diet.clo, scale=TRUE)
#or
pca <- prcomp(~Legumes + Fruit + Grasses, data=diet.clo, scale=TRUE)
#Look at PCA loadings and summary.
pca
summary(pca)
#Use Ternary::TernaryApp() to open shiny app for more detailed plot, but must use install.packages("Ternary") first.
#Transform data as needed with rcomp, acomp, rplus, aplus to declare as compositional.
diet.rcomp <- rcomp(diet.clo)
plot(diet.rcomp, col = 1:3)
diet.acomp <- acomp(diet.clo)
plot(diet.acomp, col = 1:3)
diet.rplus <- rplus(diet.clo)
plot(diet.rplus, col = 1:3)
diet.aplus <- aplus(diet.clo)
plot(diet.aplus, col = 1:3)
#Transform data with sqrt transformation
diet.sqrt <- sqrt(diet.clo)
plot(diet.sqrt, col = 1:3)
#Include closed data with rcomp transformation to PCA
pca <- prcomp(rcomp(clo(tort.pca, parts=10:12,total=1)), scale=TRUE)
#or
pca <- prcomp(diet.rcomp, scale=TRUE)
#Include closed data with other compositional data transformations to PCA
pca <- prcomp(diet.acomp, scale=TRUE)
pca <- prcomp(diet.rplus, scale=TRUE)
pca <- prcomp(diet.aplus, scale=TRUE)
#Include closed data with sqrt transformation to PCA
pca <- prcomp(sqrt(clo(tort.pca, parts=10:12,total=1)), scale=TRUE)
#or
pca <- prcomp(diet.sqrt, scale=TRUE)
pca
summary(pca)
## plot pc1 and pc2
plot(pca, type="l")
biplot(pca, scale = 0)
#Extract PC scores
str(pca)
pca$x
pca2 <- cbind(tort.pca, pca$x[,1:2])
head(pca2)
#Plot with ggplot2
library(ggplot2)
ggplot(pca2, aes(PC1,PC2, col = Sex, fill = Sex)) + stat_ellipse(geom = "polygon", col = "black", alpha = 0.5) + geom_point(shape = 21, col = "black")
ggplot(pca2, aes(PC1,PC2, col = Town, fill = Town)) + stat_ellipse(geom = "polygon", col = "black", alpha = 0.5) + geom_point(shape = 21, col = "black")
ggplot(pca2, aes(PC1,PC2, col = Season, fill = Season)) + stat_ellipse(geom = "polygon", col = "black", alpha = 0.5) + geom_point(shape = 21, col = "black")
#### Find the convex hull of the points being plotted
library(tidyverse)
hull <- pca2 %>%
slice(chull(PC1, PC2))
# Define the scatterplot
p <- ggplot(pca2, aes(PC1, PC2)) + geom_point(shape = 21)
# Overlay the convex hull
p + geom_polygon(data = hull, alpha = 0.5)
### Calculate the hulls for Ind
hull_ind <- pca2 %>%
group_by(Ind) %>%
slice(chull(PC1, PC2))
# Update the plot with a fill group, and overlay the new hulls
p + aes(fill = factor(Ind)) + geom_polygon(data = hull_ind, alpha = 0.5)
#### Calculate the hulls for Sex
hull_sex <- pca2 %>%
group_by(Sex) %>%
slice(chull(PC1, PC2))
p + aes(fill = factor(Sex)) + geom_polygon(data = hull_sex, alpha = 0.5)
#### Calculate the hulls for Season
hull_season <- pca2 %>%
group_by(Season) %>%
slice(chull(PC1, PC2))
p + aes(fill = factor(Season)) + geom_polygon(data = hull_season, alpha = 0.5)
#### Calculate the hulls for Month
hull_month <- pca2 %>%
group_by(Month) %>%
slice(chull(PC1, PC2))
p + aes(fill = factor(Month)) + geom_polygon(data = hull_month, alpha = 0.5)
#### Calculate the hulls for Town
hull_town <- pca2 %>%
group_by(Town) %>%
slice(chull(PC1, PC2))
p + aes(fill = factor(Town)) + geom_polygon(data = hull_town, alpha = 0.5)
#Correlations between original parts and PCs
cor(tort.pca[,10:14], pca2[,15:16])
#Correlations between closed 3-part subcomposition and PCs
cor(diet.clo[,1:3], pca2[,15:16])
122000*0.8
6507*1.2
155/12
78085/122000
64238/97600
155000/9
11/17222
11/17.222
122000/12
5900/(122000/12)
source("~/Desktop/JASA-Peat-Paper/R/Manuscript_Rcodes_Peat_blinded-v1.R", echo=TRUE)
source("~/Desktop/JASA-Peat-Paper/R/Manuscript_Rcodes_Peat_blinded-v1.R", echo=TRUE)
source("~/Desktop/JASA-Peat-Paper/R/Manuscript_Rcodes_Peat_blinded-v1.R")
source("~/Desktop/JASA-Peat-Paper/R/Manuscript_Rcodes_Peat_blinded-v1.R")
12*14+4
library(shapes)
shapepca
news(shapes)
library(shapes)
news(shapes)
news(package = "shapes")
library(ggplot2)
news(package = "ggplot2")
q()
library(devtools)
check_rhub()
help(check_rhub)
file.choose()
install("rhub")
install.packages("rhub")
install.packages("rhub")
file.choose()
setwd("/Users/pmzild/Dropbox/ FIU/Research/pack/")
check_rhub(pkg="shapes")
library(devtools)
check_rhub(pkg="shapes")
release(pkg="./shapes",check=TRUE)
spell_check()
release(pkg="./shapes",check=TRUE)
check_win_devel(pkg="./shapes")
release(pkg="./shapes",check=TRUE)
install.packages("revdepcheck")
devtools::revdep_check(pkg="shapes")
install.packages("revdepcheck")
devtools::install_github('r-lib/revdepcheck')
library("revdepchecke")
library("revdepcheck")
revdepcheck(pkg="shapes")
revdepcheck(pkg="shapes")
revdepcheck
revdep_check(pkg="shapes")
release(pkg="./shapes")
use_cran_comments(open = rlang::is_interactive())
use_cran_comments(pkg="./shapes"
)
help(use_cran_comments)
use_cran_comments()
setwd("/Users/pmzild/Dropbox/ FIU/Research/pack/shapes")
use_cran_comments()
release(pkg="./shapes")
release(pkg=".")
release(pkg=".")
